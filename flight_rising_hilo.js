// Generated by CoffeeScript 1.9.3

/* UserScript info {{{1
// ==UserScript==
// @name        Flight Rising HiLo
// @description Automatically plays the HiLo game for you.
// @version     1.0
// @namespace   ahto
// @include     http://flightrising.com/main.php*p=hilo*
// @require     https://greasyfork.org/scripts/10922-ahto-library/code/Ahto%20Library.js
// @grant       none
// ==/UserScript==
 */
var canvas, cards, ctx, delayClick, hi, imageLoop, leftCard, lo, playAgain, ref, setRandomTimeout, timeRemaining;

cards = {
  2: 1892593725,
  3: 745232701,
  4: 343619172,
  5: -932029944,
  6: 1865291602,
  7: -1248784561,
  8: 781610367,
  9: 1741550947,
  10: -974252486,
  11: 376369066,
  12: -1855727273
};

setRandomTimeout = function(f, min, max) {
  if (min == null) {
    min = 500;
  }
  if (max == null) {
    max = 1500;
  }
  return setTimeout(f, randInt(min, max));
};

delayClick = function(target) {
  return setRandomTimeout((function() {
    return target.click();
  }), 500, 1500);
};

playAgain = findMatches('.mb_button', 0, 1);

if (playAgain.length === 1) {
  console.log('Play again button detected; clicking.');
  delayClick(playAgain);
  return;
}

timeRemaining = $('#super-container > div:nth-child(3) > div:nth-child(1) > span:nth-child(2)')[0];

if (timeRemaining.length === 1) {
  console.log("Out of guesses.");

  /*
  timeRemaining = timeRemaining.innerHTML.match(/(\d+) minutes/)[1]
  console.log "Detected time remaining of #{timeRemaining} minutes."
  timeRemaining++ # assume the number of minutes is rounded down
  
   * convert from minutes to milliseconds
  timeRemaining = Math.floor( timeRemaining * 1000 * 60 )
  
  setRandomTimeout(
      (-> alert "Reload the page to play HiLo again."),
      timeRemaining,
      timeRemaining+5000
  )
   */
}

canvas = document.createElement('canvas');

leftCard = $('#super-container > div:nth-child(3) > img:nth-child(1)')[0];

lo = $('#super-container > div:nth-child(3) > div:nth-child(4) > map:nth-child(3) > area:nth-child(1)')[0];

hi = $('#super-container > div:nth-child(3) > div:nth-child(4) > map:nth-child(3) > area:nth-child(2)')[0];

ref = [leftCard.width, leftCard.height], canvas.width = ref[0], canvas.height = ref[1];

console.log("Canvas width x height: " + canvas.width + "x" + canvas.height);

findMatches('.main', 1, 1)[0].appendChild(canvas);

ctx = canvas.getContext('2d');

imageLoop = function(loops) {
  var DELAY, MAX_LOOPS, cardNum, hash, onHi, onLo, ref1, ref2, referenceCardNum, referenceHash;
  if (loops === void 0) {
    loops = 0;
  }
  ctx.drawImage(leftCard, 0, 0);
  hash = canvas.toDataURL("image/png").hashCode();
  for (referenceCardNum in cards) {
    referenceHash = cards[referenceCardNum];
    if (hash === referenceHash) {
      cardNum = referenceCardNum;
      console.log("Card identified as " + cardNum);
      break;
    }
  }
  if (cardNum !== void 0) {
    if (Math.random() <= 0.05) {
      console.log('Decided to fail on purpose this time.');
      ref1 = [hi, lo], onLo = ref1[0], onHi = ref1[1];
    } else {
      ref2 = [lo, hi], onLo = ref2[0], onHi = ref2[1];
    }
    if (cardNum > 13 / 2) {
      console.log('Best decision is to click lo');
      return delayClick(onLo);
    } else {
      console.log('Best decision is to click hi');
      return delayClick(onHi);
    }
  } else {
    DELAY = 2000;
    MAX_LOOPS = 10;
    console.log("Failed to identify card with hash: " + hash);
    if (loops < MAX_LOOPS) {
      console.log("[" + (loops + 1) + "/" + MAX_LOOPS + "] Looping in " + DELAY + " ms...");
      setTimeout((function() {
        return imageLoop(loops + 1);
      }), DELAY);
    } else {
      throw new Error("Failed to identify card with hash: " + hash);
    }
  }
};

imageLoop();
